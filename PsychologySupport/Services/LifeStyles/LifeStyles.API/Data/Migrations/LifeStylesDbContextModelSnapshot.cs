// <auto-generated />
using System;
using LifeStyles.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LifeStyles.API.Data.Migrations
{
    [DbContext(typeof(LifeStylesDbContext))]
    partial class LifeStylesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodActivityFoodCategory", b =>
                {
                    b.Property<Guid>("FoodActivitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoodCategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("FoodActivitiesId", "FoodCategoriesId");

                    b.HasIndex("FoodCategoriesId");

                    b.ToTable("FoodActivityFoodCategory", "public");
                });

            modelBuilder.Entity("FoodActivityFoodNutrient", b =>
                {
                    b.Property<Guid>("FoodActivitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoodNutrientsId")
                        .HasColumnType("uuid");

                    b.HasKey("FoodActivitiesId", "FoodNutrientsId");

                    b.HasIndex("FoodNutrientsId");

                    b.ToTable("FoodActivityFoodNutrient", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.EntertainmentActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImpactLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("IntensityLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EntertainmentActivities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.FoodActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IntensityLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<int>("MealTime")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodActivities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.FoodCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.FoodNutrient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodNutrients", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientEntertainmentActivity", b =>
                {
                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntertainmentActivityId")
                        .HasColumnType("uuid");

                    b.Property<string>("PreferenceLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("PatientProfileId", "EntertainmentActivityId");

                    b.ToTable("PatientEntertainmentActivities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientPhysicalActivity", b =>
                {
                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhysicalActivityId")
                        .HasColumnType("uuid");

                    b.Property<string>("PreferenceLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("PatientProfileId", "PhysicalActivityId");

                    b.ToTable("PatientPhysicalActivities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PhysicalActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ImpactLevel")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("IntensityLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PhysicalActivities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.TherapeuticActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImpactLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IntensityLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TherapeuticTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TherapeuticTypeId");

                    b.ToTable("TherapeuticActivities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.TherapeuticType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TherapeuticTypes", "public");
                });

            modelBuilder.Entity("FoodActivityFoodCategory", b =>
                {
                    b.HasOne("LifeStyles.API.Models.FoodActivity", null)
                        .WithMany()
                        .HasForeignKey("FoodActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LifeStyles.API.Models.FoodCategory", null)
                        .WithMany()
                        .HasForeignKey("FoodCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodActivityFoodNutrient", b =>
                {
                    b.HasOne("LifeStyles.API.Models.FoodActivity", null)
                        .WithMany()
                        .HasForeignKey("FoodActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LifeStyles.API.Models.FoodNutrient", null)
                        .WithMany()
                        .HasForeignKey("FoodNutrientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LifeStyles.API.Models.TherapeuticActivity", b =>
                {
                    b.HasOne("LifeStyles.API.Models.TherapeuticType", "TherapeuticType")
                        .WithMany()
                        .HasForeignKey("TherapeuticTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TherapeuticType");
                });
#pragma warning restore 612, 618
        }
    }
}
